
getgenv()._G.script_key = 'Key-Here'
--[[


░██████╗███████╗███╗░░██╗████████╗██████╗░██╗██╗░░██╗
██╔════╝██╔════╝████╗░██║╚══██╔══╝██╔══██╗██║╚██╗██╔╝
╚█████╗░█████╗░░██╔██╗██║░░░██║░░░██████╔╝██║░╚███╔╝░
░╚═══██╗██╔══╝░░██║╚████║░░░██║░░░██╔══██╗██║░██╔██╗░
██████╔╝███████╗██║░╚███║░░░██║░░░██║░░██║██║██╔╝╚██╗
╚═════╝░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝╚═╝░░╚═╝

]]--

local Byte, Char, Sub, Concat, Insert, LDExp, GetFEnv, Setmetatable, Select, Unpack, ToNumber = string.byte, string.char, string.sub, table.concat, table.insert, math.ldexp, getfenv or function() return _ENV end, setmetatable, select, unpack or table.unpack, tonumber;local function decompress(b)
    local c,d,e="","",{}local f=256;local g={}for h=0,f-1 do g[h]=Char(h)end;    local i=1;local function k()local l=ToNumber(Sub(b, i,i),36)i=i+1;local m=ToNumber(Sub(b, i,i+l-1),36)i=i+l;return m end;    c=Char(k())e[1]=c;while i<#b do local n=k()if g[n]then d=g[n]else d=c..Sub(c, 1,1)end;    g[f]=c..Sub(d, 1,1)e[#e+1],c,f=d,d,f+1 end;return table.concat(e)end;local ByteString=decompress('');
local BitXOR = bit and bit.bxor or function(a,b) local p,c=1,0 while a>0 and b>0 do local ra,rb=a%2,b%2 if ra~=rb then c=c+p end a,b,p=(a-ra)/2,(b-rb)/2,p*2 end if a<b then a=b end while a>0 do local ra=a%2 if ra>0 then c=c+p end a,p=(a-ra)/2,p*2 end return c end local function gBit(Bit, Start, End) if End then local Res = (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1); return Res - Res % 1; else local Plc = 2 ^ (Start - 1); return (Bit % (Plc + Plc) >= Plc) and 1 or 0; end; end; local Pos = 1; local function gBits32() local W, X, Y, Z = Byte(ByteString, Pos, Pos + 3); W = BitXOR(W, 25) X = BitXOR(X, 25) Y = BitXOR(Y, 25) Z = BitXOR(Z, 25) Pos = Pos + 4; return (Z*16777216) + (Y*65536) + (X*256) + W; end; local function gBits8() local F = BitXOR(Byte(ByteString, Pos, Pos), 25); Pos = Pos + 1; return F; end; local function gBits16() local W, X = Byte(ByteString, Pos, Pos + 2); W = BitXOR(W, 25) X = BitXOR(X, 25) Pos = Pos + 2; return (X*256) + W; end; local function gFloat() local Left = gBits32(); local Right = gBits32(); local IsNormal = 1; local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left; local Exponent = gBit(Right, 21, 31); local Sign = ((-1) ^ gBit(Right, 32)); if (Exponent == 0) then if (Mantissa == 0) then return Sign * 0; else Exponent = 1; IsNormal = 0; end; elseif (Exponent == 2047) then return (Mantissa == 0) and (Sign * (1 / 0)) or (Sign * (0 / 0)); end; return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52))); end; local gSizet = gBits32; local function gString(Len) local Str; if (not Len) then Len = gSizet(); if (Len == 0) then return ''; end; end; Str = Sub(ByteString, Pos, Pos + Len - 1); Pos = Pos + Len; local FStr = {} for Idx = 1, #Str do FStr[Idx] = Char(BitXOR(Byte(Sub(Str, Idx, Idx)), 25)) end return Concat(FStr); end; local gInt = gBits32; local function _R(...) return {...}, Select('#', ...) end local function Deserialize() local Instrs = {}; local Functions = {}; local Lines = {}; local Chunk = {Instrs, Functions, nil, Lines}; local ConstCount = gBits32() local Consts = {} for Idx=1, ConstCount do local Type =gBits8(); local Cons; if(Type==3) then Cons = (gBits8() ~= 0); elseif(Type==2) then Cons = gFloat(); elseif(Type==1) then Cons = gString(); end; Consts[Idx] = Cons; end;Chunk[3] = gBits8();for Idx=1,gBits32() do local Descriptor = gBits8(); if (gBit(Descriptor, 1, 1) == 0) then local Type = gBit(Descriptor, 2, 3); local Mask = gBit(Descriptor, 4, 6); local Inst={gBits16(),gBits16(),nil,nil}; if (Type == 0) then Inst[3] = gBits16(); Inst[4] = gBits16(); elseif(Type==1) then Inst[3] = gBits32(); elseif(Type==2) then Inst[3] = gBits32() - (2 ^ 16); elseif(Type==3) then Inst[3] = gBits32() - (2 ^ 16); Inst[4] = gBits16(); end; if (gBit(Mask, 1, 1) == 1) then Inst[2] = Consts[Inst[2]] end if (gBit(Mask, 2, 2) == 1) then Inst[3] = Consts[Inst[3]] end if (gBit(Mask, 3, 3) == 1) then Inst[4] = Consts[Inst[4]] end Instrs[Idx] = Inst; end end;for Idx=1,gBits32() do Functions[Idx-1]=Deserialize();end;return Chunk;end;local function Wrap(Chunk, Upvalues, Env) local Instr = Chunk[1]; local Proto = Chunk[2]; local Params = Chunk[3]; return function(...) local Instr = Instr; local Proto = Proto; local Params = Params; local _R = _R local InstrPoint = 1; local Top = -1; local Vararg = {}; local Args = {...}; local PCount = Select('#', ...) - 1; local Lupvals = {}; local abc = {}; for Idx = 0, PCount do if (Idx >= Params) then Vararg[Idx - Params] = Args[Idx + 1]; else abc[Idx] = Args[Idx + 1]; end; end; local Varargsz = PCount - Params + 1 local Inst; local Enum; while true do Inst = Instr[InstrPoint]; Enum = Inst[1];if Enum <= 181 then if Enum <= 90 then if Enum <= 44 then if Enum <= 21 then if Enum <= 10 then if Enum <= 4 then if Enum <= 1 then if Enum > 0 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 2 then local B;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; elseif Enum == 3 then abc[Inst[2]]= Inst[3] ^ abc[Inst[4]]; else local Step;local Index;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 7 then if Enum <= 5 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum > 6 then local Step;local Index;local A;abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=#abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 8 then if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum == 9 then do return end; else local Edx;local Results,Limit;local B;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; do return abc[A](Unpack(abc, A + 1, Top)) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]; 
do return Unpack(abc, A, Top) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];do return end; end; elseif Enum <= 15 then if Enum <= 12 then if Enum == 11 then if(abc[Inst[2]] < abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; else 
local A = Inst[2]
abc[A](Unpack(abc, A + 1, Top))
 end; elseif Enum <= 13 then local B = Inst[3]; local K = abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K; elseif Enum > 14 then 
local A = Inst[2]
local Results, Limit = _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 18 then if Enum <= 16 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 17 then local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(Inst[2] < abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; else abc[Inst[2]][abc[Inst[3]]] = abc[Inst[4]]; end; elseif Enum <= 19 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 20 then local A = Inst[2]; local T = abc[A]; for Idx = A + 1, Inst[3] do Insert(T, abc[Idx]) end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 32 then if Enum <= 26 then if Enum <= 23 then if Enum > 22 then local A;
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; else abc[Inst[2]]=#abc[Inst[3]]; end; elseif Enum <= 24 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 25 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else do return abc[Inst[2]](); end; end; elseif Enum <= 29 then if Enum <= 27 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 28 then do return abc[Inst[2]](); end; else if(abc[Inst[2]] == Inst[4])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 30 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 31 then local Step;local Index;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 38 then if Enum <= 35 then if Enum <= 33 then local B;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](abc[A + 1])
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; elseif Enum == 34 then abc[Inst[2]] = abc[Inst[3]] % Inst[4]; else local A=Inst[2];local B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; end; elseif Enum <= 36 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; do return abc[A](Unpack(abc, A + 1, Inst[3])) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]; 
do return Unpack(abc, A, Top) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 37 then 
local A = Inst[2]
local Results, Limit = _R(abc[A]())
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 41 then if Enum <= 39 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](Unpack(abc, A + 1, Inst[3]))
 elseif Enum > 40 then abc[Inst[2]][Inst[3]] = abc[Inst[4]]; else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 42 then Upvalues[Inst[3]] = abc[Inst[2]]; elseif Enum > 43 then 
local A = Inst[2]; 
do return abc[A], abc[A + 1] end
 else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 67 then if Enum <= 55 then if Enum <= 49 then if Enum <= 46 then if Enum == 45 then abc[Inst[2]] = abc[Inst[3]] * Inst[4]; else if(Inst[2] < abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 47 then 
local A = Inst[2]
abc[A](Unpack(abc, A + 1, Inst[3]))
 elseif Enum > 48 then abc[Inst[2]] = Inst[3] - abc[Inst[4]]; else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 52 then if Enum <= 50 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 51 then 
local A = Inst[2]
local Results = { abc[A](Unpack(abc, A + 1, Top)) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 else local K;local B;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];B= Inst[3]; K= abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 53 then 
local A = Inst[2]
abc[A](abc[A + 1])
 elseif Enum == 54 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local B=abc[Inst[4]];if not B then InstrPoint=InstrPoint+1;else abc[Inst[2]]=B;InstrPoint=Inst[3];end; end; elseif Enum <= 61 then if Enum <= 58 then if Enum <= 56 then abc[Inst[2]] = abc[Inst[3]] + Inst[4]; elseif Enum > 57 then if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else if(Inst[2] < abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 59 then if (abc[Inst[2]] < abc[Inst[4]]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; elseif Enum > 60 then local A;
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](abc[A + 1])
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
 else Env[Inst[3]] = abc[Inst[2]]; end; elseif Enum <= 64 then if Enum <= 62 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 63 then 
local A = Inst[2]
local Results = { abc[A](Unpack(abc, A + 1, Inst[3])) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 else abc[Inst[2]][abc[Inst[3]]] = Inst[4]; end; elseif Enum <= 65 then 
local A = Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
 elseif Enum == 66 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else abc[Inst[2]]= abc[Inst[3]]^ Inst[4]; end; elseif Enum <= 78 then if Enum <= 72 then if Enum <= 69 then if Enum > 68 then 
local A = Inst[2]
local Results = { abc[A](abc[A + 1]) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 70 then abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]](); elseif Enum == 71 then abc[Inst[2]]= Inst[3] ^ abc[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]]; end; elseif Enum <= 75 then if Enum <= 73 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 74 then abc[Inst[2]] = Env[Inst[3]]; else local K;local B;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];B= Inst[3]; K= abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](Unpack(abc, A + 1, Inst[3]))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]();InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=(Inst[3]~=0);InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
do return abc[Inst[2]] end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 76 then abc[Inst[2]][Inst[3]] = Inst[4]; elseif Enum == 77 then abc[Inst[2]]=(Inst[3]~=0); else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 84 then if Enum <= 81 then if Enum <= 79 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 80 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]]; end; elseif Enum <= 82 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 83 then abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 87 then if Enum <= 85 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 86 then local Edx;local Results,Limit;local A;abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A]())
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]] = abc[Inst[3]] - Inst[4]; end; elseif Enum <= 88 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 89 then 
local A = Inst[2]
abc[A](abc[A + 1])
 else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 135 then if Enum <= 112 then if Enum <= 101 then if Enum <= 95 then if Enum <= 92 then if Enum == 91 then local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
do return abc[Inst[2]] end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];do return end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 93 then abc[Inst[2]] = Env[Inst[3]]; elseif Enum == 94 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else if(abc[Inst[2]]~=abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 98 then if Enum <= 96 then local Edx;local Results;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](abc[A + 1]) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](abc[A + 1]) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; elseif Enum == 97 then abc[Inst[2]] = abc[Inst[3]] * Inst[4]; else abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=#abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]]; end; elseif Enum <= 99 then abc[Inst[2]] = Upvalues[Inst[3]]; elseif Enum == 100 then 
local A = Inst[2]
local Results, Limit = _R(abc[A](abc[A + 1]))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 else abc[Inst[2]]={}; end; elseif Enum <= 106 then if Enum <= 103 then if Enum > 102 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]]; end; elseif Enum <= 104 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 105 then local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=#abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 109 then if Enum <= 107 then abc[Inst[2]]=(Inst[3]~=0);InstrPoint=InstrPoint+1; elseif Enum == 108 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else abc[Inst[2]] = abc[Inst[3]] / abc[Inst[4]]; end; elseif Enum <= 110 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 111 then local B;local A;
A= Inst[2]
abc[A](abc[A + 1])
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 123 then if Enum <= 117 then if Enum <= 114 then if Enum == 113 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 115 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum > 116 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 120 then if Enum <= 118 then local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; elseif Enum == 119 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 121 then local B=abc[Inst[4]];if not B then InstrPoint=InstrPoint+1;else abc[Inst[2]]=B;InstrPoint=Inst[3];end; elseif Enum == 122 then abc[Inst[2]]=(not abc[Inst[3]]); else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 129 then if Enum <= 126 then if Enum <= 124 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 125 then local A = Inst[2]; do return abc[A](Unpack(abc, A + 1, Top)) end; else 
local A = Inst[2];
local C = Inst[4];
local CB = A + 2
local Result = {abc[A](abc[A + 1],abc[CB])};
for Idx = 1, C do 
	abc[CB + Idx] = Result[Idx];
end;
local R = Result[1]
if R then 
	abc[CB] = R 
	InstrPoint = Inst[3];
else
	InstrPoint = InstrPoint + 1;
end; end; elseif Enum <= 127 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum > 128 then if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; else Upvalues[Inst[3]] = abc[Inst[2]]; end; elseif Enum <= 132 then if Enum <= 130 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 131 then if(abc[Inst[2]] ~= Inst[4]) then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else if (abc[Inst[2]] < abc[Inst[4]]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; end; elseif Enum <= 133 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 134 then local Step;local Index;local B;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]] = abc[Inst[3]]; end; elseif Enum <= 158 then if Enum <= 146 then if Enum <= 140 then if Enum <= 137 then if Enum > 136 then if (abc[Inst[2]] < Inst[4]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; else local Step;local Index;local B;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 138 then abc[Inst[2]]=(not abc[Inst[3]]); elseif Enum == 139 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 143 then if Enum <= 141 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum > 142 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 144 then abc[Inst[2]] = Inst[3]; elseif Enum > 145 then 
local A = Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
 else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 152 then if Enum <= 149 then if Enum <= 147 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum > 148 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 150 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum > 151 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 155 then if Enum <= 153 then abc[Inst[2]] = abc[Inst[3]] + Inst[4]; elseif Enum == 154 then if(abc[Inst[2]] < Inst[4]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; else abc[Inst[2]] = Inst[3] - abc[Inst[4]]; end; elseif Enum <= 156 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 157 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]][abc[Inst[3]]] = abc[Inst[4]]; end; elseif Enum <= 169 then if Enum <= 163 then if Enum <= 160 then if Enum == 159 then abc[Inst[2]] = abc[Inst[3]] / Inst[4]; else abc[Inst[2]] = abc[Inst[3]] % Inst[4]; end; elseif Enum <= 161 then local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={}; elseif Enum == 162 then abc[Inst[2]] = Inst[3]; else abc[Inst[2]] = abc[Inst[3]][Inst[4]]; end; elseif Enum <= 166 then if Enum <= 164 then abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]]; elseif Enum > 165 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else abc[Inst[2]] = abc[Inst[3]]; end; elseif Enum <= 167 then abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]]; elseif Enum > 168 then abc[Inst[2]]= Inst[3] ^ abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]= Inst[3] ^ abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if (Inst[2] < abc[Inst[4]]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 175 then if Enum <= 172 then if Enum <= 170 then abc[Inst[2]](); elseif Enum > 171 then local A = Inst[2]; local Index = abc[A]; local Step = abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else if(abc[Inst[2]] <= abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 173 then local Edx;local Results;local A;abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](Unpack(abc, A + 1, Inst[3])) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum > 174 then for Idx=Inst[2],Inst[3] do abc[Idx]=nil;end; else local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; do return abc[A](Unpack(abc, A + 1, Inst[3])) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]; 
do return Unpack(abc, A, Top) end;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];do return end; end; elseif Enum <= 178 then if Enum <= 176 then for Idx=Inst[2],Inst[3] do abc[Idx]=nil;end; elseif Enum == 177 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]]=(Inst[3]~=0);InstrPoint=InstrPoint+1; end; elseif Enum <= 179 then if(abc[Inst[2]] ~= Inst[4]) then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum == 180 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 272 then if Enum <= 226 then if Enum <= 203 then if Enum <= 192 then if Enum <= 186 then if Enum <= 183 then if Enum == 182 then 
local A = Inst[2]
local Results, Limit = _R(abc[A](abc[A + 1]))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 else local Edx;local Results;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](abc[A + 1]) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]]; end; elseif Enum <= 184 then local A = Inst[2]; local Index = abc[A]; local Step = abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 185 then local Edx;local Results;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](abc[A + 1]) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 189 then if Enum <= 187 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 188 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 190 then local A=Inst[2];local B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; elseif Enum == 191 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=#abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 197 then if Enum <= 194 then if Enum == 193 then abc[Inst[2]] = Inst[3] * abc[Inst[4]]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 195 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 196 then abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] * abc[Inst[4]]; end; elseif Enum <= 200 then if Enum <= 198 then 
do return abc[Inst[2]] end
 elseif Enum > 199 then local A = Inst[2]; local Step = abc[A + 2]; local Index = abc[A] + Step; abc[A] = Index; if (Step > 0) then if (Index <= abc[A+1]) then InstrPoint = Inst[3]; abc[A+3] = Index; end elseif (Index >= abc[A+1]) then InstrPoint = Inst[3]; abc[A+3] = Index; end else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 201 then 
local A = Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
 elseif Enum > 202 then local A;
A= Inst[2]
abc[A](abc[A + 1])
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 214 then if Enum <= 208 then if Enum <= 205 then if Enum == 204 then if(abc[Inst[2]] < abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 206 then 
do return abc[Inst[2]] end
 elseif Enum == 207 then abc[Inst[2]]={}; else abc[Inst[2]] = abc[Inst[3]] / abc[Inst[4]]; end; elseif Enum <= 211 then if Enum <= 209 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]~=abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum == 210 then abc[Inst[2]][Inst[3]] = abc[Inst[4]]; else if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 212 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum > 213 then if (Inst[2] < abc[Inst[4]]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 220 then if Enum <= 217 then if Enum <= 215 then local Step;local Index;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 216 then 
local A = Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
 else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 218 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 219 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 223 then if Enum <= 221 then abc[Inst[2]] = Inst[3] + abc[Inst[4]]; elseif Enum == 222 then 
local A = Inst[2]
local Results = { abc[A](Unpack(abc, A + 1, Top)) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 else 
local A = Inst[2]
abc[A](Unpack(abc, A + 1, Inst[3]))
 end; elseif Enum <= 224 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 225 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 249 then if Enum <= 237 then if Enum <= 231 then if Enum <= 228 then if Enum == 227 then abc[Inst[2]][abc[Inst[3]]] = Inst[4]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 229 then local B;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]~=abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum == 230 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else 
local A = Inst[2]
local Results, Limit = _R(abc[A]())
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 end; elseif Enum <= 234 then if Enum <= 232 then local K;local B;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];B= Inst[3]; K= abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]; 
do return abc[A], abc[A + 1] end
 elseif Enum == 233 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A = Inst[2]; local Step = abc[A + 2]; local Index = abc[A] + Step; abc[A] = Index; if (Step > 0) then if (Index <= abc[A+1]) then InstrPoint = Inst[3]; abc[A+3] = Index; end elseif (Index >= abc[A+1]) then InstrPoint = Inst[3]; abc[A+3] = Index; end end; elseif Enum <= 235 then abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]= abc[Inst[3]]^ Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3] * abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]= abc[Inst[3]]^ Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]= abc[Inst[3]]^ Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]]; elseif Enum == 236 then local B;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
 else InstrPoint = Inst[3]; end; elseif Enum <= 243 then if Enum <= 240 then if Enum <= 238 then 
local A = Inst[2]
local Results = { abc[A](abc[A + 1]) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 elseif Enum > 239 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 241 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 242 then local B;local A;abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 246 then if Enum <= 244 then 
local A = Inst[2]
abc[A] = abc[A]()
 elseif Enum == 245 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 247 then abc[Inst[2]] = abc[Inst[3]][Inst[4]]; elseif Enum == 248 then if(abc[Inst[2]]~=abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key] Val[1][Val[2]]=Value;end;});for Idx=1,Inst[4] do InstrPoint=InstrPoint+1;local Mvm=Instr[InstrPoint];if Mvm[1]==165 then Indexes[Idx-1]={abc,Mvm[3]};else Indexes[Idx-1]={Upvalues,Mvm[3]};end;Lupvals[#Lupvals+1]=Indexes;end;abc[Inst[2]]=Wrap(NewProto,NewUvals,Env); end; elseif Enum <= 260 then if Enum <= 254 then if Enum <= 251 then if Enum > 250 then 
local A = Inst[2]
abc[A](Unpack(abc, A + 1, Top))
 else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 252 then local A = Inst[2]; do return abc[A](Unpack(abc, A + 1, Inst[3])) end; elseif Enum > 253 then abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]](); else abc[Inst[2]] = abc[Inst[3]] % abc[Inst[4]]; end; elseif Enum <= 257 then if Enum <= 255 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 256 then local Step;local Index;local A;local K;local B;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];B= Inst[3]; K= abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K;InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 258 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 259 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 266 then if Enum <= 263 then if Enum <= 261 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 262 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else do return end; end; elseif Enum <= 264 then abc[Inst[2]] = abc[Inst[3]] / Inst[4]; elseif Enum == 265 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else 
local A = Inst[2];
local C = Inst[4];
local CB = A + 2
local Result = {abc[A](abc[A + 1],abc[CB])};
for Idx = 1, C do 
	abc[CB + Idx] = Result[Idx];
end;
local R = Result[1]
if R then 
	abc[CB] = R 
	InstrPoint = Inst[3];
else
	InstrPoint = InstrPoint + 1;
end; end; elseif Enum <= 269 then if Enum <= 267 then abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];Upvalues[Inst[3]] = abc[Inst[2]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if (abc[Inst[2]] < Inst[4]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; elseif Enum == 268 then abc[Inst[2]](); else local A;abc[Inst[2]][abc[Inst[3]]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if not abc[Inst[2]] then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 270 then abc[Inst[2]] = Inst[3] * abc[Inst[4]]; elseif Enum == 271 then 
local A = Inst[2]; 
do return Unpack(abc, A, Top) end; else local Step;local Index;local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 318 then if Enum <= 295 then if Enum <= 283 then if Enum <= 277 then if Enum <= 274 then if Enum > 273 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A;
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]] < Inst[4]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 275 then local B;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]]; elseif Enum == 276 then if (Inst[2] < abc[Inst[4]]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; else local Step;local Index;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 280 then if Enum <= 278 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 279 then abc[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env); else if(abc[Inst[2]] == Inst[4])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; end; elseif Enum <= 281 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum == 282 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]]=(Inst[3]~=0); end; elseif Enum <= 289 then if Enum <= 286 then if Enum <= 284 then local B;local A;abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]]; elseif Enum > 285 then abc[Inst[2]] = abc[Inst[3]] + abc[Inst[4]]; else local B;local A;abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]]; end; elseif Enum <= 287 then local B = Inst[3]; local K = abc[B] for Idx = B + 1, Inst[4] do K = K .. abc[Idx]; end; abc[Inst[2]] = K; elseif Enum > 288 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]]; end; elseif Enum <= 292 then if Enum <= 290 then local Step;local Index;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 291 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 293 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 294 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 306 then if Enum <= 300 then if Enum <= 297 then if Enum > 296 then 
local A = Inst[2]
abc[A] = abc[A](abc[A + 1]) 
 else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 298 then local Edx;local Results,Limit;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A]())
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A]())
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
 elseif Enum > 299 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else Env[Inst[3]] = abc[Inst[2]]; end; elseif Enum <= 303 then if Enum <= 301 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum == 302 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else Top=Inst[2]; end; elseif Enum <= 304 then abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]]; elseif Enum > 305 then if (abc[Inst[2]] < Inst[4]) then InstrPoint = Inst[3]; else InstrPoint = InstrPoint + 1; end; else local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
do return abc[Inst[2]] end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];do return end; end; elseif Enum <= 312 then if Enum <= 309 then if Enum <= 307 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; elseif Enum > 308 then local Step;local Index;local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]][Inst[3]] = Inst[4]; end; elseif Enum <= 310 then local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]~=abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum > 311 then 
local A = Inst[2]
local Results = { abc[A](Unpack(abc, A + 1, Inst[3])) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
 else abc[Inst[2]]=#abc[Inst[3]]; end; elseif Enum <= 315 then if Enum <= 313 then 
local A = Inst[2]
abc[A] = abc[A]()
 elseif Enum > 314 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]=#abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]] = Upvalues[Inst[3]]; end; elseif Enum <= 316 then abc[Inst[2]] = Inst[3] + abc[Inst[4]]; elseif Enum > 317 then local B;local A;A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]]==abc[Inst[4]])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; else local Step;local Index;local A;abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 341 then if Enum <= 329 then if Enum <= 323 then if Enum <= 320 then if Enum == 319 then if(abc[Inst[2]] < Inst[4]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; else if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 321 then local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
 elseif Enum > 322 then local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](abc[A + 1])
 else Top=Inst[2]; end; elseif Enum <= 326 then if Enum <= 324 then 
local A = Inst[2]
abc[A] = abc[A](abc[A + 1]) 
 elseif Enum > 325 then local Step;local Index;local B;local Edx;local Results,Limit;local A;
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]();InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env); end; elseif Enum <= 327 then local Edx;local Results,Limit;local B;local A;
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if(abc[Inst[2]] == Inst[4])then InstrPoint=InstrPoint+1;else InstrPoint=Inst[3];end; elseif Enum > 328 then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key] Val[1][Val[2]]=Value;end;});for Idx=1,Inst[4] do InstrPoint=InstrPoint+1;local Mvm=Instr[InstrPoint];if Mvm[1]==165 then Indexes[Idx-1]={abc,Mvm[3]};else Indexes[Idx-1]={Upvalues,Mvm[3]};end;Lupvals[#Lupvals+1]=Indexes;end;abc[Inst[2]]=Wrap(NewProto,NewUvals,Env); else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 335 then if Enum <= 332 then if Enum <= 330 then abc[Inst[2]] = abc[Inst[3]] * abc[Inst[4]]; elseif Enum > 331 then abc[Inst[2]] = abc[Inst[3]] - Inst[4]; else local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; end; elseif Enum <= 333 then local Edx;local Results,Limit;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; elseif Enum > 334 then local A;abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];Env[Inst[3]] = abc[Inst[2]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][Inst[3]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]]; else local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 338 then if Enum <= 336 then if(abc[Inst[2]] <= abc[Inst[4]]) then InstrPoint = InstrPoint + 1; else InstrPoint = Inst[3]; end; elseif Enum > 337 then local T;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; T= abc[A]; for Idx = A + 1, Inst[3] do Insert(T, abc[Idx]) end; else 
local A = Inst[2]; 
do return abc[A], abc[A + 1] end
 end; elseif Enum <= 339 then local Step;local Index;local A;abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 340 then local Edx;local Results,Limit;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][abc[Inst[3]]] = abc[Inst[4]]; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 352 then if Enum <= 346 then if Enum <= 343 then if Enum > 342 then local A = Inst[2]; do return abc[A](Unpack(abc, A + 1, Inst[3])) end; else local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](abc[A + 1]) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end end; elseif Enum <= 344 then local Step;local Index;local B;local Edx;local Results,Limit;local A;
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]();InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 345 then local Edx;local Results;local A;
A= Inst[2]
abc[A] = abc[A]()
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]][abc[Inst[3]]] = abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](abc[A + 1]) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A = Inst[2]; do return abc[A](Unpack(abc, A + 1, Top)) end; end; elseif Enum <= 349 then if Enum <= 347 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 348 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else abc[Inst[2]]= abc[Inst[3]]^ Inst[4]; end; elseif Enum <= 350 then local Step;local Index;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum == 351 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; else local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A](abc[A + 1])
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];do return end; end; elseif Enum <= 358 then if Enum <= 355 then if Enum <= 353 then local Step;local Index;local A;abc[Inst[2]]();InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 354 then local A;abc[Inst[2]] = abc[Inst[3]] % Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] + Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][abc[Inst[4]]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3]; else 
local A = Inst[2]
local Results, Limit = _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
 end; elseif Enum <= 356 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum == 357 then InstrPoint = Inst[3]; else local Edx;local Results;local A;abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
Results= { abc[A](Unpack(abc, A + 1, Inst[3])) };
Edx= 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];if abc[Inst[2]] then InstrPoint=InstrPoint + 1; else InstrPoint = Inst[3]; end; end; elseif Enum <= 361 then if Enum <= 359 then local Step;local Index;local B;local Edx;local Results,Limit;local A;
A= Inst[2]
Results,Limit= _R(abc[A](Unpack(abc, A + 1, Inst[3])))
Top = Limit + A - 1
Edx= 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	abc[Idx] = Results[Edx];
end;
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Top))
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]();InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Env[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]]={};InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif Enum > 360 then local A = Inst[2]; local T = abc[A]; for Idx = A + 1, Inst[3] do Insert(T, abc[Idx]) end; else abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; end; elseif Enum <= 362 then abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - abc[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] / Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] * Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];InstrPoint = Inst[3]; elseif Enum > 363 then local Step;local Index;local B;local A;abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Inst[3];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A= Inst[2]; Index= abc[A]; Step= abc[A + 2]; if (Step > 0) then if (Index > abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end elseif (Index < abc[A+1]) then InstrPoint = Inst[3]; else abc[A+3] = Index; end else local B;local A;abc[Inst[2]] = abc[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]][Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];
A= Inst[2]
abc[A] = abc[A](Unpack(abc, A + 1, Inst[3])) 
InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];A=Inst[2];B=abc[Inst[3]];abc[A+1]=B;abc[A]=B[Inst[4]];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = abc[Inst[3]] - Inst[4];InstrPoint = InstrPoint + 1;Inst = Instr[InstrPoint];abc[Inst[2]] = Upvalues[Inst[3]]; end;InstrPoint = InstrPoint + 1; end; end; end; return Wrap(Deserialize(), {}, GetFEnv())();
