if _G.__anti_hook_ran then return end
_G.__anti_hook_ran = true

(function()
    local suspicious = {
        "hookfunction", "getrawmetatable", "setreadonly", "setupvalue",
        "getupvalue", "replaceclosure", "iscclosure", "islclosure",
        "getgc", "getreg", "checkcaller"
    }
    for _, n in ipairs(suspicious) do
        if rawget(_G, n) then error("⚠️ Exploit API detected: "..n) end
    end

    local isc = iscclosure
    local function isnative(f) return type(f) == "function" and isc and isc(f) end
    local critical = {pcall, tostring, error, print, setmetatable, getmetatable, pairs, ipairs}
    for _, f in ipairs(critical) do
        if not isnative(f) then error("⚠️ Core function hook detected") end
    end

    local mt = getrawmetatable(game)
    if mt then
        local nc = newcclosure
        local old = mt.__namecall
        setreadonly(mt, false)
        mt.__namecall = nc(function(...) return old(...) end)
        setreadonly(mt, true)
    end

    if not islclosure(game.HttpGet) or getfenv(game.HttpGet) ~= _G then
        error("⚠️ game.HttpGet hook/env tampering")
    end

    local info = debug.getinfo
    local function checkinfo(f, src)
        local i = info(f)
        if not i or (i.what ~= "C" and not (i.source or ""):find(src)) then
            error("⚠️ Function identity mismatch")
        end
    end
    checkinfo(pcall, "[C]") 
    checkinfo(tostring, "[C]")

    local tb = debug.traceback()
    if tb and (tb:find("hook") or tb:find("inject")) then error("⚠️ Suspicious call stack") end

    local mem_before = collectgarbage("count")
    task.wait(1)
    local mem_after = collectgarbage("count")
    if math.abs(mem_after - mem_before) > 100 then error("⚠️ Suspicious memory spike") end

    if getgc then
        for _, v in ipairs(getgc(true)) do
            if type(v) == "function" then
                local i = debug.getinfo(v)
                if i and i.short_src and i.short_src:lower():find("inject") then
                    error("⚠️ Injected function in GC")
                end
            end
        end
    end

    print("✅ Anti-hook checks complete")
end)()

(function()
    local expected = {
        tostring = tostring,
        tonumber = tonumber,
        pairs = pairs,
        next = next,
        type = type,
        select = select
    }
    for name, ref in pairs(expected) do
        if _G[name] ~= ref then
            error("⚠️ Global function tampered: "..name)
        end
    end
end)()

(function()
    local function checkmt(obj, nm)
        local mt = getmetatable(obj)
        if mt and type(mt) ~= "table" then error("⚠️ Invalid metatable for "..nm) end
    end
    checkmt(game, "game")
    checkmt(workspace, "workspace")
end)()

(function()
    local known = {
        "pcall", "type", "tostring", "print", "game", "workspace", "wait",
        "require", "getfenv", "setfenv", "tick", "os", "math", "string",
        "table", "debug"
    }
    local function contains(tbl, val)
        for _, v in ipairs(tbl) do if v == val then return true end end
        return false
    end
    for k,v in pairs(getgenv()) do
        if type(v) == "function" and not contains(known, k) then
            error("⚠️ Unknown global function detected: "..tostring(k))
        end
    end
end)()

local locked_env = (function()
    local le = {}
    le.string_find = string.find
    le.string_lower = string.lower
    le.string_sub = string.sub
    le.string_match = string.match
    le.type = type
    le.pcall = pcall
    le.tostring = tostring
    le.tonumber = tonumber
    le.select = select
    le.os_time = os.time
    le.table_insert = table.insert
    le.table_remove = table.remove
    le.table_concat = table.concat
    le.loadstring = loadstring or load
    le.request = request or http_request or (http and http.request) or (syn and syn.request)
    le.game_HttpGet = game and game.HttpGet or nil
    if le.type(le.request) ~= "function" then error("Secure request unavailable") end
    return le
end)()

(function()
    local t0 = os.clock()
    for _=1,1e6 do end
    local t1 = os.clock()
    if (t1 - t0) > 0.5 then error("Execution slowdown detected") end
end)()

local key = getgenv().key or ""
local hwid = gethwid()

local request = request or http_request or (http and http.request) or (syn and syn.request)
if type(request) ~= "function" then error("Request function missing") end
if key == "" then error("Key not set") end
if not hwid or hwid == "" then error("HWID missing") end

local isValidResponse = (function(body)
    local b = tostring(body):lower()
    return b:find("ok") or b:find("valid")
end)

local getServerResponse = (function(extra)
    local t = os.time()
    local url = ("http://whitelist-ivp4.vercel.app/api/vaildate?key=%s&hwid=%s&t=%s%s"):format(key, hwid, t, extra or "")
    local success, response = pcall(function()
        return request({Url = url, Method = "GET"})
    end)
    if not success or not response or not response.Body then
        error("Failed server request")
    end
    return tostring(response.Body)
end)

(function()
    local responses = {}
    for i=1,10 do
        local param = (i%3 == 0 and "&check=3") or (i%2 == 0 and "&check=2") or ("&chk="..i)
        if i == 7 then param = "&keyrev="..key:reverse() end
        responses[i] = getServerResponse(param)
        if not isValidResponse(responses[i]) then
            error("Whitelist failed on check "..i..": "..responses[i])
        end
    end
    for i=2,#responses do
        if responses[i] ~= responses[1] then error("Inconsistent server responses") end
    end
    if #key < 5 or #hwid < 5 then error("Invalid key or HWID length") end

    print("✔️ Whitelist verified")
    pcall(function()
        (loadstring or load)(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Ez.exe/refs/heads/main/Whitelist", true))()
    end)
end)()

(loadstring or load)(game:HttpGet("https://raw.githubusercontent.com/milo22-ux/Custom-print/refs/heads/main/Verison%201.3", true))()
